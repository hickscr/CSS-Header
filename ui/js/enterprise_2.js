/**
 * @file
 * A JavaScript file for the theme.
 *
 * In order for this JavaScript to be loaded on pages, see the instructions in
 * the README.txt next to this file.
 */

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it with an "anonymous closure". See:
// - https://drupal.org/node/1446420
// - http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth
(function ($, Drupal, window, document, undefined) {
	
	var mainTransition = function(reverse){
    var body = $("#main");
    if(reverse != true){
      if (body) {body.addClass('trans-visible');}
    } else {
      if (body) {body.removeClass('trans-visible');}
    }
  };
    
  /**
   * Tree View Plug-in for expanding and collapsing tree lists generated by Views
   * TODO: extrapolate icon class name and tree root class name 
   */
  var treeView = {
    init: function (options) {
      return this.each(function(){
        var settings = {
              childEl: ".item-list",
              iconMarkup: '<a href="#" class="toggle-branch"><i class="icon-plus3"></i></a>'
            },
            $tree = $(this)
        ;
        // Merge the user options with the default options
        if (options) {
          $.extend(settings, options);
        }
        
        // Get branches that have child branches
        var $branches = $tree.find("li").filter(function(i){
          return $(this).children(settings.childEl)[0];
        });
        
        
        // store branches collection for this tree and expanded state
        $tree.data({
          branches:$branches,
          expanded:false
        })
        
        // add treeRoot class
        .addClass("treeRoot")
        
        // custom event for when all branches are closed
        .on("treeClosed",function(){
          $tree.data("expanded",false);
        })
        
        // custom event for when all branches are open
        .on("treeOpen",function(){
          $tree.data("expanded",true);
        });
        
        // create expand icon
        var $icon = $(settings.iconMarkup);
        
        // bind click event to icon
        $icon.bind("click",function(e){
          e.preventDefault();
          var $this = $(this),
              $i = $this.find("i:first"),
              $branch = $this.parent(),
              $tree = $this.parents(".treeRoot:first")
          ;
          if($i.hasClass("icon-plus3")){
            $this.addClass("open");
            $i.removeClass("icon-plus3").addClass("icon-minus3");
            $branch.data("list").slideDown(function(){
              // if all branches are open then trigger treeOpen event
              if($tree.find(".icon-plus3").length == 0){
                $tree.trigger("treeOpen");
              }
            });
            // mark the last visible tree branch
            treeView._lastVisible($tree);
          } else {
            $this.removeClass("open");
            $i.removeClass("icon-minus3").addClass("icon-plus3");
            $branch.data("list").slideUp(function(){
              // collapse all child branches after parent has finished closing
              $branch.find(".toggle-branch").removeClass("open");
              $branch.find("i").removeClass("icon-minus3").addClass("icon-plus3");
              $branch.find(settings.childEl).hide();
              // mark the last visible tree branch
              treeView._lastVisible($tree);
              // if all branches are closed then trigger treeClosed event
              if($tree.find(".icon-minus3").length == 0){
                $tree.trigger("treeClosed");
              }
            });
          }
        });
        
        // loop through each branch, store target child branch, and add expand icon
        $branches.each(function(){
          var $branch = $(this),
              $list = $branch.find(settings.childEl).first();
          ;
          $branch.data("list",$list).prepend($icon.clone(true));
        });
        
        // mark the last visible tree branch
        treeView._lastVisible($tree);
      });
    },
    _lastVisible: function(tree){
      tree.find(".lastBranch").removeClass("lastBranch");
      tree.find("li:visible:last").addClass("lastBranch");
    },
    expand: function(){
      // expand a single branch
      return this.each(function(){
        if(this.tagName.toLowerCase() != "li"){
          return;
        }
        var $i = $(this).find("i:first");
        if($i.hasClass("icon-plus3")){
           $i.parent().click();
         }
      });
    },
    collapse: function(){
      // collapse a single branch
      return this.each(function(){
        if(this.tagName.toLowerCase() != "li"){
          return;
        }
        var $i = $(this).find("i:first");
        if($i.hasClass("icon-minus3")){
          $i.parent().click();
        }
      });
    },
    expandAll: function(){
      // expand all branches in the tree
      // TODO: expanding slide animations may be too much with large trees
      return this.each(function(){
        $(this).data("expanded",true).data("branches").treeView("expand");
      });
      
    },
    collapseAll: function(){
      // collapse all branches in the tree
      return this.each(function(){
        var $tree = $(this),
            branches = $tree.data("branches"),
            mainBranches = branches.filter(function(){
              return $(this).parent().hasClass("treeRoot");
            })
        ;
        mainBranches.treeView("collapse");
        $tree.data("expanded",false);
      });
    },
    toggleAll: function(){
      var $tree = $(this);
      $tree.data("expanded")?$tree.treeView("collapseAll"):$tree.treeView("expandAll");
    }
  };
    
  
  /**
   * JQuery plugin initializer
   */
  $.fn.treeView = function (method) {
    if (treeView[method]) {
      return treeView[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method) {
      return treeView.init.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.treeView');
    }
  };
  
  
  var equalize = {
    heights: function() {

        var currentTallest = 0;

        //loop through each element to capture the tallest height
        this.each(function(){
          var $this = $(this);
          if($this.is(":visible")){
            if ($this.css("min-height","").outerHeight() > currentTallest) { currentTallest = $this.outerHeight(); }
          } else {
            if ($this.css("min-height","").getHiddenDimensions().outerHeight > currentTallest) { currentTallest = $this.getHiddenDimensions().outerHeight; }
          }
        });

        //assign tallest height to all elements
        this.each(function(){
            $(this).css({'min-height': currentTallest});
        });

        return this;
    },
    widths: function() {

        var currentWidest = 0;

        //loop through each element to capture the tallest height
        this.each(function(){
          var $this = $(this);
          if($this.is(":visible")){
            if ($this.css("min-width","").outerWidth() > currentWidest) { currentWidest = $this.outerWidth(); }
          } else {
            if ($this.css("min-width","").getHiddenDimensions().outerWidth > currentWidest) { currentWidest = $this.getHiddenDimensions().outerWidth; }
          }
        });

        //assign tallest height to all elements
        this.each(function(){
            $(this).css({'min-width': currentWidest});
        });

        return this;
    },
    removeHeights: function(){
        this.each(function(){
            $(this).css("min-height","");
        });
        return this;
    },
    childHeights: function() {
        this.each(function(){

            var currentTallest = 0,
                $el = $(this);
                
            $el.children().each(function(){
              var $this = $(this);
              if($this.is(":visible")){
                if ($this.outerHeight() > currentTallest) { currentTallest = $this.outerHeight(); }
              } else {
                if ($this.getHiddenDimensions().outerHeight > currentTallest) { currentTallest = $this.getHiddenDimensions().outerHeight; }
              }
            });

            $el.children().css({'min-height': currentTallest});
        });
        return this;
    },
    childWidths: function() {
        this.each(function(){

            var currentWidest = 0,
                $el = $(this);

            $el.children().each(function(){
              var $this = $(this);
              if($this.is(":visible")){
                if($this.outerWidth() > currentWidest) { currentWidest = $this.outerWidth(); }
              } else {
                if($this.getHiddenDimensions().outerWidth > currentWidest) { currentWidest = $this.getHiddenDimensions().outerWidth; }
              }
            });

            $el.children().css({'min-width': currentWidest});
        });
        return this;
    },
    removeChildHeights: function() {
        this.each(function(){
            $(this).children().each(function(){
                $(this).css("min-height","");
            });
        });
        return this;
    },
    _dimMethod: function() {
      
    }
  };
  
    /**
   * JQuery plugin initializer
   */
  $.fn.equalize = function (method) {
    if (equalize[method]) {
      return equalize[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method) {
      //call equalize heights as default
        return methods.heights.apply( this, arguments );
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.equalize');
    }
  };
  
  //Optional parameter includeMargin is used when calculating outer dimensions
  $.fn.getHiddenDimensions = function(includeMargin) {
      var $item = this,
          props = { position: 'absolute', visibility: 'hidden', display: 'block' },
          dim = { width:0, height:0, innerWidth: 0, innerHeight: 0,outerWidth: 0,outerHeight: 0 },
          $hiddenParents = $item.parents().andSelf().not(':visible'),
          includeMargin = (includeMargin == null)? false : includeMargin;
  
      var oldProps = [];
      $hiddenParents.each(function() {
          var old = {};
  
          for ( var name in props ) {
              old[ name ] = this.style[ name ];
              //this.style[ name ] = props[ name ]; //using jQuery.show() instead to accomodate elements that are not block elements
          }
  
          oldProps.push(old);
          $(this).show().css("visibility","hidden");
      });
  
      dim.width = $item.width();
      dim.outerWidth = $item.outerWidth(includeMargin);
      dim.innerWidth = $item.innerWidth();
      dim.height = $item.height();
      dim.innerHeight = $item.innerHeight();
      dim.outerHeight = $item.outerHeight(includeMargin);
  
      $hiddenParents.each(function(i) {
          var old = oldProps[i];
          for ( var name in props ) {
              this.style[ name ] = old[ name ];
          }
      });
  
      return dim;
  };

  
  // jQuery document ready
  $(function() {
    
    //add placeholder text to inputs
    $("#edit-keyword-global").attr("placeholder","Search for people, organizations and content");
    
    //equalize mega menu siblings
    $(".tb-megamenu-row").equalize("childHeights");
    
    //add icons to faceted search
    var paneTitles = $("#left-col .contextual-links-region, #left-col .pane-block").find("h2").filter(function(i){
      var isSearch = $(this).parent().hasClass("facet-search");
      return !isSearch;
    });
    var icon = $('<i class="icon-minus2"></i>');
    paneTitles.append(icon);
    
    //clean up metadata results
    $("div.metadata").children(":empty").hide();
    
    
    // tree functionality
    var $tree = $(".tree-view");
    var $treeExpander = $tree.find(".tree-view-all a");
    $tree.find("ul:first").treeView();
    
    $treeExpander.bind("click",function(e){
      e.preventDefault();
      var $link = $(this);
      var $linkedTree = $link.parents(".tree-view:first").find("ul:first");
      //$linkedTree.treeView("toggleAll");
      $linkedTree.treeView("expandAll");
    });
    /*
    // toggle between "View All" and "Collapse All" states
    $tree.on("treeClosed",function(){
      console.log("all branches are closed!");
      $(this).find(".tree-view-all a").text("View All");
    });
    $tree.on("treeOpen",function(){
      console.log("all branches are closed!");
      $(this).find(".tree-view-all a").text("Collapse All");
    });
    */
  });


  // To understand behaviors, see https://drupal.org/node/756722#behaviors
  Drupal.behaviors.my_custom_behavior = {
    attach: function(context, settings) {
    	var $html = $("html");
    	var $body = $("body");
  
      // Place your code here.
     $(window).load(mainTransition);
      
      //faceted search box collapse
      
      $("#left-col .contextual-links-region, #left-col .pane-block", context).on("click","h2",function(e){
        var $this = $(this);
        var icon = $this.find("i");
        var iconClass = icon.attr("class");
        if($this.parent().hasClass("facet-search")){
          return;
        }
        if (iconClass == "icon-minus2") {
          icon.addClass("icon-plus2").removeClass("icon-minus2");
        } else {
          icon.addClass("icon-minus2").removeClass("icon-plus2");
        }
        $this.next().slideToggle();
      }); 	
          
      //font resizer
      $("#header-links .font-resize").on("click","a",function(e){
          e.preventDefault();
          $this = $(this);
          var newClass = $this.attr("class") + "Font";
          if(!$html.hasClass(newClass)){
              $html.removeClass("normalFont largeFont xlargeFont");
              $html.addClass(newClass);
          }
      });
    }
  };
  // To understand behaviors, see https://drupal.org/node/756722#behaviors
  Drupal.behaviors.my_custom_behavior2 = {
    attach: function(context, settings) {
    	
  
      // Place your code here.
     $(window).load(mainTransition);
        //faceted search box collapse
        $("#main-wrap #content", context).once('page-admin-toggle').on("click","h4.page-admin-link",function(e){
          var $this = $(this);
          var icon = $this.find("i");
          var iconClass = icon.attr("class");
          if($this.parent().hasClass("facet-search")){
            return;
          }
          if (iconClass == "icon-minus2") {
            icon.addClass("icon-plus2").removeClass("icon-minus2");
          } else {
            icon.addClass("icon-minus2").removeClass("icon-plus2");
          }
          $this.next().slideToggle();
        }); 	
     	  
      
    }
  };
  /*
* Turn off browser autocomplete for global search page
*/
(function($) {
  $(function() {
    $('#main #edit-keyword-global').attr('autocomplete', 'off');
  });
})(jQuery);


})(jQuery, Drupal, this, this.document);
;
// This javascript is also included on all pages of the system via our nhlbitheme.info file
// Changing the location of this file will need to be reflected in that file as well
(function($) {  
   showQuickView = function(id){
      //Check if the popup already exists for this author, if so, show it otherwise
      // create it with an ajax call
      var spinner = '<div class="profile-spinner"><div class="profile-spinner-wrap"><img src="/sites/intranet.nhlbi.nih.gov/modules/Custom/nhlbi_profile_quick_view/images/spinner-white-64.gif" alt="spinner"><div class="loading-text">Retrieving Profile...</div></div></div>';
      var $popup = $('<div class="profile-quick-view"><div class="profile-quick-view-content">'+ spinner +'</div></div>');
      if($('#profile-quick-view-' + id).length){
        $('#profile-quick-view-' + id).show();
      }else{
        $('header').after($popup);
        $.ajax({
          url: "/get/profile-quick-view/" + id,
          dataType: "html",
        })
        .done(function(response){
          var $response = $($.parseJSON(response).data).html();
          $(".profile-quick-view:visible").attr("id","profile-quick-view-" + id).html($response);
        });
      }
   };
   
   hideQuickView = function(id){
       $('#profile-quick-view-' + id).hide();
   };
})(jQuery);

;
