/**
* @file
* A JavaScript file for the theme.
*
* In order for this JavaScript to be loaded on pages, see the instructions in
* the README.txt next to this file.
*/

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it with an "anonymous closure". See:
// - https://drupal.org/node/1446420
// - http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth
(function ($, Drupal, window, document, undefined) {
  
  var mainTransition = function(reverse){
    var body = $("#main");
    if(reverse != true){
      if (body) {body.addClass('trans-visible');}
    } else {
      if (body) {body.removeClass('trans-visible');}
    }
 };
    
  /**
   * Tree View Plug-in for expanding and collapsing tree lists generated by Views
   * TODO: extrapolate icon class name and tree root class name 
   */
  var treeView = {
    init: function (options) {
      return this.each(function(){
        var settings = {
              childEl: ".item-list",
              iconMarkup: '<a href="#" class="toggle-branch"><i class="ico-plus3"></i></a>'
            },
            $tree = $(this)
        ;
        // Merge the user options with the default options
        if (options) {
          $.extend(settings, options);
        }
        
        // Get branches that have child branches
        var $branches = $tree.find("li").filter(function(i){
          return $(this).children(settings.childEl)[0];
        });
        
        
        // store branches collection for this tree and expanded state
        $tree.data({
          branches:$branches,
          expanded:false
        })
        
        // add treeRoot class
        .addClass("treeRoot")
        
        // custom event for when all branches are closed
        .on("treeClosed",function(){
          $tree.data("expanded",false);
        })
        
        // custom event for when all branches are open
        .on("treeOpen",function(){
          $tree.data("expanded",true);
        });
        
        // create expand icon
        var $icon = $(settings.iconMarkup);
        
        // bind click event to icon
        $icon.bind("click",function(e){
          e.preventDefault();
          var $this = $(this),
              $i = $this.find("i:first"),
              $branch = $this.parent(),
              $tree = $this.parents(".treeRoot:first")
          ;
          if($i.hasClass("ico-plus3")){
            $this.addClass("open");
            $i.removeClass("ico-plus3").addClass("ico-minus3");
            $branch.data("list").slideDown(function(){
              // if all branches are open then trigger treeOpen event
              if($tree.find(".ico-plus3").length == 0){
                $tree.trigger("treeOpen");
              }
            });
            // mark the last visible tree branch
            treeView._lastVisible($tree);
          } else {
            $this.removeClass("open");
            $i.removeClass("ico-minus3").addClass("ico-plus3");
            $branch.data("list").slideUp(function(){
              // collapse all child branches after parent has finished closing
              $branch.find(".toggle-branch").removeClass("open");
              $branch.find("i").removeClass("ico-minus3").addClass("ico-plus3");
              $branch.find(settings.childEl).hide();
              // mark the last visible tree branch
              treeView._lastVisible($tree);
              // if all branches are closed then trigger treeClosed event
              if($tree.find(".ico-minus3").length == 0){
                $tree.trigger("treeClosed");
              }
            });
          }
        });
        
        // loop through each branch, store target child branch, and add expand icon
        $branches.each(function(){
          var $branch = $(this),
              $list = $branch.find(settings.childEl).first();
          ;
         $branch.data("list",$list).prepend($icon.clone(true));
        });
        
        // mark the last visible tree branch
        treeView._lastVisible($tree);
      });
    },
    _lastVisible: function(tree){
      tree.find(".lastBranch").removeClass("lastBranch");
      tree.find("li:visible:last").addClass("lastBranch");
    },
    expand: function(){
      // expand a single branch
      return this.each(function(){
        if(this.tagName.toLowerCase() != "li"){
          return;
        }
        var $i = $(this).find("i:first");
        if($i.hasClass("ico-plus3")){
           $i.parent().click();
         }
      });
    },
    collapse: function(){
      // collapse a single branch
      return this.each(function(){
        if(this.tagName.toLowerCase() != "li"){
          return;
        }
        var $i = $(this).find("i:first");
        if($i.hasClass("ico-minus3")){
          $i.parent().click();
        }
      });
    },
    expandAll: function(){
      // expand all branches in the tree
      // TODO: expanding slide animations may be too much with large trees
      return this.each(function(){
        $(this).data("expanded",true).data("branches").treeView("expand");
      });
      
    },
    collapseAll: function(){
      // collapse all branches in the tree
      return this.each(function(){
        var $tree = $(this),
            branches = $tree.data("branches"),
            mainBranches = branches.filter(function(){
              return $(this).parent().hasClass("treeRoot");
            })
        ;
        mainBranches.treeView("collapse");
        $tree.data("expanded",false);
      });
    },
    toggleAll: function(){
      var $tree = $(this);
      $tree.data("expanded")?$tree.treeView("collapseAll"):$tree.treeView("expandAll");
    }
  };
    
  
  /**
   * JQuery plugin initializer
   */
  $.fn.treeView = function (method) {
    if (treeView[method]) {
      return treeView[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method) {
      return treeView.init.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.treeView');
    }
  };
  
  
  var equalize = {
    heights: function() {

        var currentTallest = 0;

        //loop through each element to capture the tallest height
        this.each(function(){
          var $this = $(this);
          if($this.is(":visible")){
            if ($this.css("min-height","").outerHeight() > currentTallest) { currentTallest = $this.outerHeight(); }
          } else {
            if ($this.css("min-height","").getHiddenDimensions().outerHeight > currentTallest) { currentTallest = $this.getHiddenDimensions().outerHeight; }
          }
        });

        //assign tallest height to all elements
        this.each(function(){
            $(this).css({'min-height': currentTallest});
        });

        return this;
    },
    widths: function() {

        var currentWidest = 0;

        //loop through each element to capture the widest width
        this.each(function(){
          var $this = $(this);
          if($this.is(":visible")){
            if ($this.css("min-width","").outerWidth() > currentWidest) { currentWidest = $this.outerWidth(); }
          } else {
            if ($this.css("min-width","").getHiddenDimensions().outerWidth > currentWidest) { currentWidest = $this.getHiddenDimensions().outerWidth; }
          }
        });

        //assign widest width to all elements
        this.each(function(){
            $(this).css({'min-width': currentWidest});
        });

        return this;
    },
    removeHeights: function(){
        this.each(function(){
            $(this).css("min-height","");
        });
        return this;
    },
    childHeights: function() {
        this.each(function(){

            var currentTallest = 0,
                $el = $(this);
                
            $el.children().each(function(){
              var $this = $(this);
              if($this.is(":visible")){
                if ($this.outerHeight() > currentTallest) { currentTallest = $this.outerHeight(); }
              } else {
                if ($this.getHiddenDimensions().outerHeight > currentTallest) { currentTallest = $this.getHiddenDimensions().outerHeight; }
              }
            });

            $el.children().css({'min-height': currentTallest});
        });
        return this;
    },
    childWidths: function() {
        this.each(function(){

            var currentWidest = 0,
                $el = $(this);

            $el.children().each(function(){
              var $this = $(this);
              if($this.is(":visible")){
                if($this.outerWidth() > currentWidest) { currentWidest = $this.outerWidth(); }
              } else {
                if($this.getHiddenDimensions().outerWidth > currentWidest) { currentWidest = $this.getHiddenDimensions().outerWidth; }
              }
            });

            $el.children().css({'min-width': currentWidest});
        });
        return this;
    },
    removeChildHeights: function() {
        this.each(function(){
            $(this).children().each(function(){
                $(this).css("min-height","");
            });
        });
        return this;
    },
    _dimMethod: function() {
      
    }
  };
  
    /**
   * JQuery plugin initializer
   */
  $.fn.equalize = function (method) {
    if (equalize[method]) {
      return equalize[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method) {
      //call equalize heights as default
        return methods.heights.apply( this, arguments );
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.equalize');
    }
  };
  
  //Optional parameter includeMargin is used when calculating outer dimensions
  $.fn.getHiddenDimensions = function(includeMargin) {
      var $item = this,
          props = { position: 'absolute', visibility: 'hidden', display: 'block' },
          dim = { width:0, height:0, innerWidth: 0, innerHeight: 0,outerWidth: 0,outerHeight: 0 },
          $hiddenParents = $item.parents().andSelf().not(':visible'),
          includeMargin = (includeMargin == null)? false : includeMargin;
  
      var oldProps = [];
      $hiddenParents.each(function() {
          var old = {};
  
          for ( var name in props ) {
              old[ name ] = this.style[ name ];
              //this.style[ name ] = props[ name ]; //using jQuery.show() instead to accomodate elements that are not block elements
          }
  
          oldProps.push(old);
          $(this).show().css("visibility","hidden");
      });
  
      dim.width = $item.width();
      dim.outerWidth = $item.outerWidth(includeMargin);
      dim.innerWidth = $item.innerWidth();
      dim.height = $item.height();
      dim.innerHeight = $item.innerHeight();
      dim.outerHeight = $item.outerHeight(includeMargin);
  
      $hiddenParents.each(function(i) {
          var old = oldProps[i];
          for ( var name in props ) {
              this.style[ name ] = old[ name ];
          }
      });
  
      return dim;
};

  
  // jQuery document ready
  $(function() {
    //Rename facet search title
    if($(".pane-current-search-nhlbi .pane-title")[0]){
      if($("#edit-keyword-global-second")[0]){
        $(".pane-current-search-nhlbi .pane-title").text('Your refinements to the search for "'+$("#edit-keyword-global-second")[0].value+'":');    
      } else if ($("#edit-keyword--2")[0]) {
        if($("#edit-keyword--2")[0].value !== ""){
          $(".pane-current-search-nhlbi .pane-title").text('Your refinements to the search for "'+$("#edit-keyword--2")[0].value+'":');  
        } else {
          $(".pane-current-search-nhlbi .pane-title").text('Your refinements to your search:');
        }
      } else if($("#edit-keyword-org-search")[0]){
        if($("#edit-keyword-org-search")[0].value !== ""){
            $(".pane-current-search-nhlbi .pane-title").text('Your refinements to the search for "'+$("#edit-keyword-org-search")[0].value+'":');  
        } else {
          $(".pane-current-search-nhlbi .pane-title").text('Your refinements to your search:');
        }
      } else{
        $(".pane-current-search-nhlbi .pane-title").text('Your refinements to your search:');  
      }
    }

    //add placeholder text to inputs
    $("#edit-keyword-global").attr("placeholder","Search NHLBI Intranet and Public Website");

    //equalize mega menu siblings
    $(".tb-megamenu-row").equalize("childHeights");
        
    //add icons to faceted search
    var paneTitles = $("#left-col .contextual-links-region, #left-col .pane-block, #left-col .block-facetapi").find("h2").filter(function(i){
      var isSearch = $(this).parent().hasClass("facet-search");
      return !isSearch;
    });
    var icon = $('<i class="ico-plus2"></i>');
    paneTitles.append(icon);

    //collapse all by default
    //paneTitles.nextAll(":not(:first)").slideToggle();
    //paneTitles.find("i").not(":first").addClass("ico-plus2").removeClass("ico-minus2");
    
    //hide show/hide all link if no facets present
    //if($('#left-col .contextual-links-region').length == 0) {
      $('.show-hide').hide();
    //}
    
    //clean up metadata results
    $("div.metadata").children(":empty").hide();

    // Append a 'Clear Search' to bottom of narrow by search
    //checks if there is a keyword query in the url
    if(window.location.href.indexOf('keyword=') > -1){
        var newpath = decodeURIComponent(window.location.href);
        if(newpath.match(/(keyword=.*)/)){
            //There are facets selected
            if(newpath.match(/f\[0\]/)){
                //keyword is at the beginning of the query
                if(newpath.match(/(\?keyword=)/)){
                    newpath = newpath.replace(/(keyword=.*?&)/, "");
                }
                //keyword is in the middle of the query
                else if(newpath.match(/(&keyword=.*?&)/)){
                    newpath = newpath.replace(/(&keyword=.*?&)/, "&");
                }
                //query is at the end
                else{
                    newpath = newpath.replace(/&keyword=.*/, "");
                }
            }
            else{
                newpath = newpath.replace(/keyword=.*/, "");
            }
        }
        newpath = Drupal.checkPlain(newpath);
        var clear_search_term = $('<div class="Clear-Search"><a id="clear-search-term" href="'+newpath+'">Clear Search</a></div>');
        clear_search_term.appendTo("#left-col .facet-search form .views-exposed-form");
    }
    
    // Append a 'Show All' link to the header of the facet block on Taxonomy pages
    $('<div class="tree-view-all"><a href="#">Show All</a></div>').appendTo('#content-container .facetapi-collapsible .block-title');

    // facet show/view all functionality
    hideAll($("#content-container .facetapi-collapsible .tree-view-all a"));
    $("#content-container .facetapi-collapsible .tree-view-all a").bind("click",function(e) {
      e.preventDefault();
      e.stopPropagation();
      if ($(this).text() == "Show All") {
        showAll($(this), "facetapi-collapsible");
      } else {
        hideAll($(this), "facetapi-collapsible");
      }
    });

    function showAll(el, containerClass) {
      $(el).text("Hide All");
      $('.' + containerClass + ' ul li ul').addClass('expanded');
      $('.' + containerClass + ' ul li ul').removeClass('collapsed');
      $('.' + containerClass + ' i').addClass('ico-minus3');
      $('.' + containerClass + ' i').removeClass('ico-plus3');
    }

    function hideAll(el, containerClass) {
      $(el).text("Show All");
      $('.' + containerClass + ' ul li ul').removeClass('expanded');
      $('.' + containerClass + ' ul li ul').addClass('collapsed');
      $('.' + containerClass + ' i').removeClass('ico-minus3');
      $('.' + containerClass + ' i').addClass('ico-plus3');
    }

    // tree functionality
    var $tree = $(".tree-view");
    var $treeExpander = $tree.find(".tree-view-all a");
    $tree.find("ul:first").treeView();
    
    $treeExpander.bind("click",function(e){
      e.preventDefault();
      var $link = $(this);
      var $linkedTree = $link.parents(".tree-view:first").find("ul:first");
      if($(this).text() == "Show All"){
        $linkedTree.treeView("expandAll");
        $(this).text("Hide All");
      } else {
        $linkedTree.treeView("collapseAll");
        $(this).text("Show All");
      }
    });

    
    // toggle between "Show All" and "Hide All" states
    /*
    $tree.on("treeClosed",function(){
      console.log("all branches are closed!");
      $(this).find(".tree-view-all a").text("Show All");
    });
    $tree.on("treeOpen",function(){
      console.log("all branches are opened!");
      $(this).find(".tree-view-all a").text("Hide All");
    });
    */
    
    // resize image caption to match image width
   $('.field-type-image .cbox_caption').width($(".field-type-image a.colorbox").width());
   
   //Book TOC Accordion
   function boldRecursiveParent(childLink){
        var nextChildLink = "";
        if($(childLink).hasClass("menu__link") || $(childLink).hasClass("menu__item")){
          $(childLink).css("font-weight", "700");
          if(childLink === $(childLink).closest(".expanded").children()[0]){
            nextChildLink = $(childLink).parent().parent().closest(".expanded").children()[0];
          } else {
            nextChildLink = $(childLink).closest(".expanded").children()[0];  
          }
          if (typeof(nextChildLink) === "undefined"){
            return false;
          } else {
            boldRecursiveParent(nextChildLink);
          }
        } else {
          return false;
        }
      }
      // Booklet Page TOC Accordion Logic
      // Checks to see if it is on a booklet page
      if($(".node-type-nhlbi-booklet-page")[0] || $(".node-type-nhlbi-booklet-container")[0]){
        // Checks to see if the node is a booklet type
        if($(".module-title").find(".book-title")[0]){
          //Creates the Show/Hide all buttons
          $(".module-title").first().after("<div class='module-toggle'></div>");
          $(".module-toggle").append("<a id='show-all-toc'>Show all</a>");
          $(".module-toggle").append(" | ");
          $(".module-toggle").append("<a id='hide-all-toc'>Hide all</a>");
          //Recursively bold parent pages up until the root
          boldRecursiveParent(".menu__link.active");
        
          //On page load, show selected node and its parents, otherwise hide them in the accordion
          var tocSize = $(".module-content").first().find(".menu").first().children().length;
          for (var i = 0; i < tocSize; i++){
            var tocWeight = $($($(".module-content").first().find(".menu").first().children()[i]).children()[0]).css("font-weight");
            if (tocWeight === "bold" || tocWeight === "700"){
                 if($($(".module-content").first().find(".menu").first().children()[i]).hasClass("expanded")){
                   $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).show();
                   for(var j = 0; j < $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item").size(); j++){
                     var childWeight = $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find("a").css("font-weight");
                     if(childWeight === "bold" || childWeight === "700"){
                       $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find(".menu").show();  
                     } else {
                       $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find(".menu").hide();  
                     }
                   }
                 } 
              } else {
                if($($(".module-content").first().find(".menu").first().children()[i]).hasClass("expanded")){
                   $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).hide();  
                 }
              }
          }
          //On click show all, all child nodes will now show
          $("#show-all-toc").click(function(){
            var tocLength = $(".module-content").first().find(".menu").first().children().length;
            for (var i = 0; i < tocLength; i++){
              if ($($(".module-content").first().find(".menu").first().children()[i]).hasClass("expanded")){
                $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).slideDown();
                for(var j = 0; j < $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item").size(); j++){
                  $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find(".menu").slideDown();
                }
              }
            }
          });
          //On click hide all, child nodes that are note selected are hidden
          $("#hide-all-toc").click(function(){
            var tocLength = $(".module-content").first().find(".menu").first().children().length;
            for (var i = 0; i < tocLength; i++){
              var tocWeight = $($($(".module-content").first().find(".menu").first().children()[i]).children()[0]).css("font-weight");
              if (tocWeight === "bold" || tocWeight === "700"){
                 if($($(".module-content").first().find(".menu").first().children()[i]).hasClass("expanded")){
                   $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).show();
                   for(var j = 0; j < $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item").size(); j++){
                     var childWeight = $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find("a").css("font-weight");
                     if(childWeight === "bold" || childWeight === "700"){
                       $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find(".menu").show();  
                     } else {
                       $($($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).find(".menu__item")[j]).find(".menu").slideUp();  
                     }
                   }
                 } 
              } else {
                if($($(".module-content").first().find(".menu").first().children()[i]).hasClass("expanded")){
                   $($($(".module-content").first().find(".menu").first().children()[i]).children()[1]).slideUp();  
                 }
              }
            }
          });  
          }
        }
   
  });
  
  // To understand behaviors, see https://drupal.org/node/756722#behaviors
  Drupal.behaviors.my_custom_behavior = {
    attach: function(context, settings) {
       var $html = $("html");
       var $body = $("body");
  
      // Place your code here.
     $(window).load(mainTransition);
     
     if($("#left-col .item-list")[0]){
       $("#left-col .item-list").hide();  
     }
     
     if($("#left-col .item-list").find(".facetapi-active")[0]){
       for(var i = 0; i < $("#left-col .item-list").find(".facetapi-active").length; i++){
         $($("#left-col .item-list").find(".facetapi-active")[i]).closest(".item-list").show();    
       }
     } else {
       $("#left-col .item-list").hide();  
     }
      
      
      //faceted search box collapse  
      $("#left-col .contextual-links-region, #left-col .pane-block, #left-col .block-facetapi", context).on("click","h2",function(e){
        var $this = $(this);
        var icon = $this.find("i");
        var iconClass = icon.attr("class");
        if($this.parent().hasClass("facet-search")){
          return;
        }
        if (iconClass == "ico-minus2") {
          icon.addClass("ico-plus2").removeClass("ico-minus2");
        } else {
          icon.addClass("ico-minus2").removeClass("ico-plus2");
        }
        $this.nextAll().slideToggle();
      });
      
      //"show/hide all" link for facet blocks
      $("#left-col .show-hide", context).on("click","a",function(e){
        var $this = $(this);
        var leftCol = $("#left-col"); 
        
        if($this.data("isClosedAll")){
          //open all
          var closedIcons = leftCol.find("i.ico-minus2");
          closedIcons.parent().trigger("click");
          $this.text("Show All");
        
          $this.data("isClosedAll", false);
        } else {
          //close all
          var openIcons = leftCol.find("i.ico-plus2");
          openIcons.parent().trigger("click");
          $this.text("Hide All");
        
          $this.data("isClosedAll", true);
        }
      });

     //font resizer
      $("#header-links .font-resize").on("click","a",function(e){
          e.preventDefault();
          $this = $(this);
          var newClass = $this.attr("class") + "Font";
          if(!$html.hasClass(newClass)){
              $html.removeClass("normalFont largeFont xlargeFont");
              $html.addClass(newClass);
          }
      });
    }
  };
  // To understand behaviors, see https://drupal.org/node/756722#behaviors
  Drupal.behaviors.my_custom_behavior2 = {
    attach: function(context, settings) {


      // Place your code here.
     $(window).load(mainTransition);
        //faceted search box collapse
        $("#main-wrap #content", context).once('page-admin-toggle').on("click","h4.page-admin-link",function(e){
          var $this = $(this);
          var icon = $this.find("i");
          var iconClass = icon.attr("class");
          if($this.parent().hasClass("facet-search")){
            return;
          }
          if (iconClass == "ico-minus2") {
            icon.addClass("ico-plus2").removeClass("ico-minus2");
          } else {
            icon.addClass("ico-minus2").removeClass("ico-plus2");
          }
          $this.next().slideToggle();
        });
    }
  };
/*
* Turn off browser autocomplete for global search page
*/
  //Overriding the Original facetCollapseExpanded JavaScript code.
  // This strange little function allows the "expanded" class to be added to or
  // removed from the passed in facet based on the passed in condition, which
  // corresponds to a configured setting.
  var facetCollapseExpanded = function ($facet, condition, operation, behavior){
    var wrapper = $facet.find('.facet-collapsible-wrapper').get(0);
    if (wrapper) {
      var facetId = wrapper.id;
      facetId = facetId.replace('facet-collapsible-', '');
      facetId = facetId.replace(/-/g, '_');
      if (Drupal.settings.facetapi_collapsible[facetId]) {
        // We either need to check that the 'condition' in Drupal.settings DOES
        // hold for the given facet's configuration, or that it DOES NOT hold. 
        // The 'operation' boolean tells us which.
        var cond = (Drupal.settings.facetapi_collapsible[facetId][condition] 
                === operation);
        // Only add or remove the class if the condition has been satisfied.
        if (cond) {
          // behavior is either "addClass" or "removeClass"
          $facet[behavior]('expanded');
        }
      }
    }
  };

  /**
   * Overwritting the collapsible facet JavaScript
   * Behavior for collapsing faceted search lists.
   */
  Drupal.behaviors.facetapiCollapsible = {
    attach : function (context) {
      var i = 0;
      $('.facetapi-collapsible').once(function () {
        var $facet = $(this);
        if ($('.facetapi-active', this).size() > 0) {
          $(this).addClass('expanded active');
        }
        else {
          // Add the 'expanded' class to the facet if configured to do so.
          facetCollapseExpanded($facet, 'expand', 1, 'addClass');

          $('h2', this).each(function () {
            $(this).click(function () {
              $facet.siblings('.facetapi-collapsible:not(.active)')
                      .each(function () {
               // Remove the 'expanded' class from all other facets that haven't
               // been configured to stay open.
                facetCollapseExpanded($(this), 'keep_open', 0, 'removeClass');
              });
              //Commented this line out to keep the Greybar 
              //from being collapsible
              //$facet.toggleClass('expanded');
            });
          });
        }

        // check cookie
        var cookie = $.cookie('Facetapi.collapsible.expanded');
        cookie = $.parseJSON(cookie);
        if (!cookie) {
          cookie = {};
        }
        $('.facetapi-collapsible ul.facetapi-collapsible .item-list')
                .once(function () {
          var $list = $(this);
          var parentwrapper = $list.closest('.facet-collapsible-wrapper');
          if (parentwrapper) {
            var parentfacetId = parentwrapper.attr('id');
            parentfacetId = parentfacetId.replace('facet-collapsible-', '');
            parentfacetId = parentfacetId.replace(/-/g, '_');
            if (Drupal.settings.facetapi_collapsible[parentfacetId] 
                    && Drupal.settings.facetapi_collapsible[parentfacetId]
                    .collapsible_children) {
              var $parentfacet = $($list.siblings('.facetapi-facet').get(0));

              $('a', $parentfacet).each(function () {
                if (!cookie || !cookie[parentfacetId] || (cookie[parentfacetId]
                        .indexOf($(this).attr('href')) < 0)) {
                  $(this).html('<span class="facetapi-collapsible-handle"><i class="ico-plus3"></i></span><span class="facetapi-collapsible-title">'
                          + $(this).html() + '</span>');
                  $('ul', $(this).closest('.facetapi-facet')
                          .siblings('.item-list')).first()
                          .removeClass('expanded');
                }
                else {
                 $(this).html('<span class="facetapi-collapsible-handle"><i class="ico-minus3"></i></span><span class="facetapi-collapsible-title">'
                          + $(this).html() + '</span>');
                  $(this).closest('.block-facetapi.facetapi-collapsible')
                          .addClass('expanded');
                }
              }).addClass('collapselink');

              // expand facet with active childs
              if ($('a.facetapi-active', $(this)).length) {
                $('ul', $(this).closest('div')).first().addClass('expanded');
              }

              $('a .facetapi-collapsible-handle', $parentfacet)
                      .click(function (event) {
                var $clickedlist = $('ul', $parentfacet.siblings('.item-list'))
                    .first();
                var $clickedlink = $(this).closest('a');
                $clickedlist.toggleClass("expanded");
                if (!cookie) {
                  cookie = {};
                }
                if (!cookie[parentfacetId]) {
                  cookie[parentfacetId] = [];
                }
                if ($clickedlist.hasClass('expanded')) {
                  $(this).html('<i class="ico-minus3">');
                  cookie[parentfacetId].push($clickedlink.attr('href'));
                }
                else {
                  $(this).html('<i class="ico-plus3">');
                  var index = cookie[parentfacetId].indexOf($clickedlink
                          .attr('href'));
                  if (index !== -1) {
                    cookie[parentfacetId].splice(index, 1);
                  }
                }

                if (Drupal.settings.facetapi_collapsible[parentfacetId]
                        .keep_open === false) {
                  $('ul', $list.closest('li').siblings('li')).each(function () {
                    $(this).removeClass("expanded");
                    $('a .facetapi-collapsible-handle', $(this).closest('li'))
                            .html('<i class="ico-plus3">');
                    var index = cookie[parentfacetId].indexOf($('a', $(this)
                            .closest('li')).attr('href'));
                    if (index !== -1) {
                      cookie[parentfacetId].splice(index, 1);
                   }
                  });
                }
                $.cookie(
                  'Facetapi.collapsible.expanded',
                  JSON.stringify(cookie),
                  {
                    path: Drupal.settings.basePath,
                    expires: 1
                  }
                );
                event.preventDefault();
              });
            }
          }
        });
        i = i + 1;
      });
    }
  };
    $(function() {
        $('#main #edit-keyword-global').attr('autocomplete', 'off');

        var skosConcept = $("[typeof = 'skos:Concept']");

        if (skosConcept[0]){
            for (var i = 0; i < skosConcept.length; i++){
                if (skosConcept.parent()[0]["childNodes"][i] !== undefined && skosConcept.parent()[0]["childNodes"][i].textContent === ", "){
                    skosConcept.parent()[0]["childNodes"][i].textContent = ">>";
                }
            }
       }
      //facetapi auto open if active
      if($("#left-col .item-list").find(".facetapi-active")[0]){
        for(var i = 0; i < $("#left-col .item-list").find(".facetapi-active").length; i++){
          $($("#left-col .item-list").find(".facetapi-active")[i]).closest(".item-list").parent().find("i").addClass("ico-minus2").removeClass("ico-plus2");   
        }
      }
    });
    
    //Overwriting the external link module to allow custom popups
  Drupal.behaviors.extlink.attach = function (context, settings) {
    // Backwards compatibility, for the benefit of modules overriding extlink
    // functionality by defining an "extlinkAttach" global function.
    if (typeof extlinkAttach === 'function') {
      extlinkAttach(context);
    }
    else {
      Drupal.extlink.attach(context, settings);
    }
    var div = document.createElement('div');
    $(div).attr("title", "External Web Site Policy");
    div.innerHTML = '<p>This graphic notice (<span class="ext"><span class="element-invisible">\n\
    (link is external)</span></span>) means that you are leaving the NIH website.</p>\n\
    <p>This external link provides additional information that is consistent with \n\
    the intended purpose of this site.</p><p>NIH cannot attest to the accuracy of \n\
    a non-federal site.</p><p>Linking to a non-federal site does not constitute an\n\
     endorsement by NIH or any of its employees of the sponsors or the information \n\
    and products presented on the site.</p><p>You will be subject to the destination \n\
    site’s privacy policy when you follow the link.</p>';

    $("span[class='ext']").click(function(e){
      $(div).dialog({
        resizable: false,
        draggable:false,
        width: 500,
        modal: true,
        buttons: {
          "OK": function() {
            $( this ).dialog( "close" );
          },
      }
      });
      e.preventDefault();
      return false;
    });
  };
  
})(jQuery, Drupal, this, this.document);;
// This javascript is also included on all pages of the system via our nhlbitheme.info file
// Changing the location of this file will need to be reflected in that file as well
(function($) {  
   showQuickView = function(id){
      //Check if the popup already exists for this author, if so, show it otherwise
      // create it with an ajax call
      var spinner = '<div class="profile-spinner"><div class="profile-spinner-wrap"><img src="/sites/intranet.nhlbi.nih.gov/modules/Custom/nhlbi_profile_quick_view/images/spinner-white-64.gif" alt="spinner"><div class="loading-text">Retrieving Profile...</div></div></div>';
      var $popup = $('<div class="profile-quick-view"><div class="profile-quick-view-content">'+ spinner +'</div></div>');
      if($('#profile-quick-view-' + id).length){
        $('#profile-quick-view-' + id).show();
      }else{
        $('header').after($popup);
        $.ajax({
          url: "/get/profile-quick-view/" + id,
          dataType: "html",
        })
        .done(function(response){
          var $response = $($.parseJSON(response).data).html();
          // sanitize the ajax that is returned
      //    $response.serialize();
         // $response == 'poopy cat';
//alert('happy');
          $(".profile-quick-view:visible").attr("id","profile-quick-view-" + id).html($response);
        });
      }
   };
   
   hideQuickView = function(id){
       $('.profile-quick-view').hide();
   };
})(jQuery);

;
(function ($) {
  


Drupal.behaviors.initColorboxDefaultStyle = {
  attach: function (context, settings) {
    
    $('.cboxElement').once('appendExpander', function () {
      // Apply the effect to the elements only once.
      var $this = $(this);
      var expander = $('<div class="cbox_expander"><i class="ico-enlarge"></i></div>');
      var caption = $('<div class="cbox_caption">'+ $this.attr("title") +'</div>');
      $(this).append(expander).after(caption);
    });
    
    $(document).bind('cbox_complete', function () {
      // Only run if there is a title.
      if ($('#cboxTitle:empty', context).length == false) {
        /*
        $('#cboxLoadedContent img', context).bind('mouseover', function () {
          $('#cboxTitle', context).slideDown();
        });
        $('#cboxOverlay', context).bind('mouseover', function () {
          $('#cboxTitle', context).slideUp();
        });
        */
      }
      else {
        $('#cboxTitle', context).hide();
      }
    });
  }
};

})(jQuery);
;

